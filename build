#!/bin/bash

# 安装依赖软件（这里只是示例，可能需要根据immortalwrt的实际需求调整）
sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
sudo -E apt-get -qq update
sudo -E apt-get -qq install ack neofetch antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
sudo -E apt-get -qq autoremove --purge
sudo -E apt-get -qq clean
sudo timedatectl set-timezone "Asia/Shanghai"
sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 curl gawk gettext git libncurses5-dev libz-dev patch python3.5 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf
sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang clangd cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5 libncursesw5-dev libreadline-dev libssl-dev libtool lld lldb lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip python3-ply python-docutils qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev 

# 克隆immortalwrt
git clone https://gitclone.com/github.com/immortalwrt/immortalwrt.git

sleep 5

# 检查是否存在immortalwrt文件夹
if [ ! -d "immortalwrt" ]; then
echo "immortalwrt克隆失败，请检查网络并重试。"
exit 1
fi
echo "immortalwrt克隆完成，继续执行脚本..."

# 进入克隆目录
cd immortalwrt

# 查看分支
git tag

# 输入想要的分支
# 使用read命令获取用户输入
echo "请输入想要编译的分支："
read input_word

# 将用户输入作为git checkout命令的参数
echo "已输入：$input_word"
git checkout $input_word

# 自定义操作1：添加额外的feeds
echo -e "配置常用包..."

# 检查是否已存在相同软件源，如果有则跳过
if! grep -q "src-git kenzo https://github.com/kenzok8/openwrt-packages"./feeds.conf.default; then
    echo "src-git kenzo https://github.com/kenzok8/openwrt-packages" >>./feeds.conf.default
fi

# 检查是否已存在相同软件源，如果有则跳过
if! grep -q "src-git small https://github.com/kenzok8/small"./feeds.conf.default; then
    echo "src-git small https://github.com/kenzok8/small" >>./feeds.conf.default
fi

# 自定义操作2：修改默认IP
echo -e "修改默认ip地址..."
sed -i 's/192.168.1.1/10.0.0.2/g' package/base-files/files/bin/config_generate

# 更新并加载feeds源
./scripts/feeds update -a
./scripts/feeds install -a

# 提示即将进入配置页面
echo "5秒后进入配置页面"
sleep 5

# 配置feeds源
make menuconfig

# 执行下载依赖
make download -j$(nproc)

# 执行编译固件
make -j$(nproc)
